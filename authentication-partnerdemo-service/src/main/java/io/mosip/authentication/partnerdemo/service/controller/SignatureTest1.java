package io.mosip.authentication.partnerdemo.service.controller;

import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.codec.binary.Base64;
import org.jose4j.json.JsonUtil;
import org.jose4j.keys.X509Util;
import org.jose4j.lang.JoseException;
import org.jose4j.lang.JsonHelp;
import org.jose4j.jws.JsonWebSignature;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.security.PublicKey;
import org.jose4j.jws.AlgorithmIdentifiers;

public class SignatureTest1 {
	public static void main(String[] args) {
		//String signatureTxt = "eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXMkgzTUp2TUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1EQXhNVFV3TnpNMFdoY05NVGt4TURNeE1UVXdOek0wV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWmprNU1qVmlZbVF0T0dVMlpDMDBaR1kzTFdJMU9HSXRNRFV5TkdZMU5qZGpORFF6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQU1ONzBEcGhJaTVUNitaODl0NTViQUhYVTZaMENsZ0tyV3lWNHNzbjRUNnUvem8wNnRZUDV6a05wdEFpcStzb1dTdUpmd1o4NFk3OVRNcXh2YUt4ZWVrc25MYVNnUXk5SHFLS1F2eWdxeUh1T0FNYnB4VEFCblRXaWRrU2VwWm5nRkordStHdzNMcWpnQ0F6OWpZZWRvTmRPblNYZm01QnZDUUR3cHZqcXNvU3doRy9YWVpyNUNqcnlMZ0JGRmN0MjRydy9oTDRyS2Qzd3luQnoxdTFZMkpTTmVvOXU1YzkyYzlNNjlybXkwTEhwUkcvT1B4b0JZR0RLWmEva0EzU2RDNEhrU1hDd3FLODZKSFlULytMbTRMTmRyZFhRT0NtN2tETVpjeGFkTnppUDNRNzQ0Slp0ZTJNYXVwZXV2VTJ2d1ZSVklubFJnZ1B2dFIwSDZaVTAxRUNBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnVMcWFGTElTelZyaEhMMXZHemt3a2o5K3c0NTQzRDE4OWZrV0ZjaHQwd1JYajBZbWhialNUUThNdFBudXlGbHlURkc2aEtLaUJNbmNwM3ZqcjRtZTR3bVhxdmdTMzN5S0ZzZnZ0dFdOc2JlUnBzTWJ5WXNTVTBnMFF4aGZOVXZ6UXVsa0VNRkRQRW1kWGhtdXpDU2F5ZXdKWWJwZGtQR2liTTlpa0QyRGpkemVjemR6ais0VGRCY2QyZkhLNUU0K2N6MmNXZDBMR1NiWWNaUnc2bkpvVVNCQWVjYTdBNTNSbld0SWZOYTlLZyswVDVFRi82VkRaYWlxaURnMmt4Z0FsbWZ0eXBrMVREWXN6RkpvanNTQ1ZvMjFDcUx5VXpPRzRYb3NrVVlqMUo3cHE3Y2tpWmp4WXU0Y3J6K0hNcmNZK0ZmWE03UXdZTnVlUlVuK1pSVENnPSJdfQ.RUU5OTA5OUMwNzg3MjZCRDVGQjMxNzJEQjYyOTUzOURBNDE0NjA3MjNCMDg4QzIxNDIxNTkyQTNEQ0M0N0ExRQ.XqVHK26R9VihnD5DljbNRxlN4ht2cagYkEiQ5o8xC_06i7zGgISWfn_49yqwz0FYP9xh4HOpJBfytCzFvoNS_zriw67QwDSOOWTTk_HYkZk0W1vlReitlGP7alGP3RRry1k80lWGV-oC75u-8l6Uql0ZTEeFatrFn2TqK7qSeI4tXWur0d4NTzLmrTXn9wPpaOdGcd0yjlg9ATaD0cZb58UtO1s1TNIlOcc_w_3ukepr13cHyjnYCJY_rxw2KAH3XT3cfgr7RO7ZWSVwsOjxJq7SL2e6NzWDRvfuQnszDZS0G3uSJObeDQBCQ1GyNhZ_IykIYWZ_nKn0QFwj0XNomA.eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXMkgzTUp2TUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1EQXhNVFV3TnpNMFdoY05NVGt4TURNeE1UVXdOek0wV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWmprNU1qVmlZbVF0T0dVMlpDMDBaR1kzTFdJMU9HSXRNRFV5TkdZMU5qZGpORFF6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQU1ONzBEcGhJaTVUNitaODl0NTViQUhYVTZaMENsZ0tyV3lWNHNzbjRUNnUvem8wNnRZUDV6a05wdEFpcStzb1dTdUpmd1o4NFk3OVRNcXh2YUt4ZWVrc25MYVNnUXk5SHFLS1F2eWdxeUh1T0FNYnB4VEFCblRXaWRrU2VwWm5nRkordStHdzNMcWpnQ0F6OWpZZWRvTmRPblNYZm01QnZDUUR3cHZqcXNvU3doRy9YWVpyNUNqcnlMZ0JGRmN0MjRydy9oTDRyS2Qzd3luQnoxdTFZMkpTTmVvOXU1YzkyYzlNNjlybXkwTEhwUkcvT1B4b0JZR0RLWmEva0EzU2RDNEhrU1hDd3FLODZKSFlULytMbTRMTmRyZFhRT0NtN2tETVpjeGFkTnppUDNRNzQ0Slp0ZTJNYXVwZXV2VTJ2d1ZSVklubFJnZ1B2dFIwSDZaVTAxRUNBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnVMcWFGTElTelZyaEhMMXZHemt3a2o5K3c0NTQzRDE4OWZrV0ZjaHQwd1JYajBZbWhialNUUThNdFBudXlGbHlURkc2aEtLaUJNbmNwM3ZqcjRtZTR3bVhxdmdTMzN5S0ZzZnZ0dFdOc2JlUnBzTWJ5WXNTVTBnMFF4aGZOVXZ6UXVsa0VNRkRQRW1kWGhtdXpDU2F5ZXdKWWJwZGtQR2liTTlpa0QyRGpkemVjemR6ais0VGRCY2QyZkhLNUU0K2N6MmNXZDBMR1NiWWNaUnc2bkpvVVNCQWVjYTdBNTNSbld0SWZOYTlLZyswVDVFRi82VkRaYWlxaURnMmt4Z0FsbWZ0eXBrMVREWXN6RkpvanNTQ1ZvMjFDcUx5VXpPRzRYb3NrVVlqMUo3cHE3Y2tpWmp4WXU0Y3J6K0hNcmNZK0ZmWE03UXdZTnVlUlVuK1pSVENnPSJdfQ.RTI1MDMyMjMyRjQ4MjMxNDMzQUUyNDdBOEY5RTY2NEQzNDMxQTdEQkU1MEFCRjkxQjQ1OEM0NjU4MDA1RTQwNQ.VbGJaJL2tKuoQzplPOqh5f_JFNPZlPVsVFBVSvL2a_iwFpfVZ3HYs91L7JW4VqPSnRGZhfV-sfMJQDrZFiuZcebde5P6l_COMj-UkGqrarY-GWEXI_9n4dOtPAaKCdFDLyNwSUUMcwZ7NZM5wGqKWczI7an-leU25-m9Q5TybAYmXbmIDrp43tmlPcQCnwBqMjAkZEOqRAvr1LTAF_IreT5Ds_xIt1pbSjUvN90zWmwhz24be0qkOdiWfuTCpa3OyOH8tZhHps6wEFdMg5pZ9qnNvM9EQr-GbN6wE6j5EvfKAFI7mOj6AEx2DdJLvnYneht9OCw9HWKscpksg4rdQg";
//		String signatureTxt = "eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXMkgzTUp2TUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1EQXhNVFV3TnpNMFdoY05NVGt4TURNeE1UVXdOek0wV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWmprNU1qVmlZbVF0T0dVMlpDMDBaR1kzTFdJMU9HSXRNRFV5TkdZMU5qZGpORFF6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQU1ONzBEcGhJaTVUNitaODl0NTViQUhYVTZaMENsZ0tyV3lWNHNzbjRUNnUvem8wNnRZUDV6a05wdEFpcStzb1dTdUpmd1o4NFk3OVRNcXh2YUt4ZWVrc25MYVNnUXk5SHFLS1F2eWdxeUh1T0FNYnB4VEFCblRXaWRrU2VwWm5nRkordStHdzNMcWpnQ0F6OWpZZWRvTmRPblNYZm01QnZDUUR3cHZqcXNvU3doRy9YWVpyNUNqcnlMZ0JGRmN0MjRydy9oTDRyS2Qzd3luQnoxdTFZMkpTTmVvOXU1YzkyYzlNNjlybXkwTEhwUkcvT1B4b0JZR0RLWmEva0EzU2RDNEhrU1hDd3FLODZKSFlULytMbTRMTmRyZFhRT0NtN2tETVpjeGFkTnppUDNRNzQ0Slp0ZTJNYXVwZXV2VTJ2d1ZSVklubFJnZ1B2dFIwSDZaVTAxRUNBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnVMcWFGTElTelZyaEhMMXZHemt3a2o5K3c0NTQzRDE4OWZrV0ZjaHQwd1JYajBZbWhialNUUThNdFBudXlGbHlURkc2aEtLaUJNbmNwM3ZqcjRtZTR3bVhxdmdTMzN5S0ZzZnZ0dFdOc2JlUnBzTWJ5WXNTVTBnMFF4aGZOVXZ6UXVsa0VNRkRQRW1kWGhtdXpDU2F5ZXdKWWJwZGtQR2liTTlpa0QyRGpkemVjemR6ais0VGRCY2QyZkhLNUU0K2N6MmNXZDBMR1NiWWNaUnc2bkpvVVNCQWVjYTdBNTNSbld0SWZOYTlLZyswVDVFRi82VkRaYWlxaURnMmt4Z0FsbWZ0eXBrMVREWXN6RkpvanNTQ1ZvMjFDcUx5VXpPRzRYb3NrVVlqMUo3cHE3Y2tpWmp4WXU0Y3J6K0hNcmNZK0ZmWE03UXdZTnVlUlVuK1pSVENnPSJdfQ.RUU5OTA5OUMwNzg3MjZCRDVGQjMxNzJEQjYyOTUzOURBNDE0NjA3MjNCMDg4QzIxNDIxNTkyQTNEQ0M0N0ExRQ.XqVHK26R9VihnD5DljbNRxlN4ht2cagYkEiQ5o8xC_06i7zGgISWfn_49yqwz0FYP9xh4HOpJBfytCzFvoNS_zriw67QwDSOOWTTk_HYkZk0W1vlReitlGP7alGP3RRry1k80lWGV-oC75u-8l6Uql0ZTEeFatrFn2TqK7qSeI4tXWur0d4NTzLmrTXn9wPpaOdGcd0yjlg9ATaD0cZb58UtO1s1TNIlOcc_w_3ukepr13cHyjnYCJY_rxw2KAH3XT3cfgr7RO7ZWSVwsOjxJq7SL2e6NzWDRvfuQnszDZS0G3uSJObeDQBCQ1GyNhZ_IykIYWZ_nKn0QFwj0XNomA.eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXMkgzTUp2TUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1EQXhNVFV3TnpNMFdoY05NVGt4TURNeE1UVXdOek0wV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWmprNU1qVmlZbVF0T0dVMlpDMDBaR1kzTFdJMU9HSXRNRFV5TkdZMU5qZGpORFF6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQU1ONzBEcGhJaTVUNitaODl0NTViQUhYVTZaMENsZ0tyV3lWNHNzbjRUNnUvem8wNnRZUDV6a05wdEFpcStzb1dTdUpmd1o4NFk3OVRNcXh2YUt4ZWVrc25MYVNnUXk5SHFLS1F2eWdxeUh1T0FNYnB4VEFCblRXaWRrU2VwWm5nRkordStHdzNMcWpnQ0F6OWpZZWRvTmRPblNYZm01QnZDUUR3cHZqcXNvU3doRy9YWVpyNUNqcnlMZ0JGRmN0MjRydy9oTDRyS2Qzd3luQnoxdTFZMkpTTmVvOXU1YzkyYzlNNjlybXkwTEhwUkcvT1B4b0JZR0RLWmEva0EzU2RDNEhrU1hDd3FLODZKSFlULytMbTRMTmRyZFhRT0NtN2tETVpjeGFkTnppUDNRNzQ0Slp0ZTJNYXVwZXV2VTJ2d1ZSVklubFJnZ1B2dFIwSDZaVTAxRUNBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnVMcWFGTElTelZyaEhMMXZHemt3a2o5K3c0NTQzRDE4OWZrV0ZjaHQwd1JYajBZbWhialNUUThNdFBudXlGbHlURkc2aEtLaUJNbmNwM3ZqcjRtZTR3bVhxdmdTMzN5S0ZzZnZ0dFdOc2JlUnBzTWJ5WXNTVTBnMFF4aGZOVXZ6UXVsa0VNRkRQRW1kWGhtdXpDU2F5ZXdKWWJwZGtQR2liTTlpa0QyRGpkemVjemR6ais0VGRCY2QyZkhLNUU0K2N6MmNXZDBMR1NiWWNaUnc2bkpvVVNCQWVjYTdBNTNSbld0SWZOYTlLZyswVDVFRi82VkRaYWlxaURnMmt4Z0FsbWZ0eXBrMVREWXN6RkpvanNTQ1ZvMjFDcUx5VXpPRzRYb3NrVVlqMUo3cHE3Y2tpWmp4WXU0Y3J6K0hNcmNZK0ZmWE03UXdZTnVlUlVuK1pSVENnPSJdfQ.RTI1MDMyMjMyRjQ4MjMxNDMzQUUyNDdBOEY5RTY2NEQzNDMxQTdEQkU1MEFCRjkxQjQ1OEM0NjU4MDA1RTQwNQ.VbGJaJL2tKuoQzplPOqh5f_JFNPZlPVsVFBVSvL2a_iwFpfVZ3HYs91L7JW4VqPSnRGZhfV-sfMJQDrZFiuZcebde5P6l_COMj-UkGqrarY-GWEXI_9n4dOtPAaKCdFDLyNwSUUMcwZ7NZM5wGqKWczI7an-leU25-m9Q5TybAYmXbmIDrp43tmlPcQCnwBqMjAkZEOqRAvr1LTAF_IreT5Ds_xIt1pbSjUvN90zWmwhz24be0qkOdiWfuTCpa3OyOH8tZhHps6wEFdMg5pZ9qnNvM9EQr-GbN6wE6j5EvfKAFI7mOj6AEx2DdJLvnYneht9OCw9HWKscpksg4rdQg";
		String signatureTxt = "eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXNGJwTTArTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1ETXdNRGMxTURFMVdoY05NVGt4TVRJNU1EYzFNREUxV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWW1Nd1lqWTRORGd0Tm1RME5TMDBObVF4TFdFNVltUXRZak16TkRReE1HSm1PREl6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQUxIWEl5MzVVMnJnRGpOZStvZHEza2dYNC9CT0UxMkVFQkIrb3pMYUVnWnVRbjBGOVNDVWxGckZtZlFPbzVuZlBHbi9FQnlpdEg4cXVLM1F5SUw0OVRYWnZmUlFpcG4rcW0xSUMvNzJUQ1k4WmZPR2dkeUduVExSUEhkc25JcnJ5dlB2NlBJOTl6UzU5WjlndG9kSmFNV04waHBwamZYek1xd0pSbkpabEpZbVExRzMxRlhzbVBNYVkrSFhNSURoY0MyUFBjVEhESGtsRTdUZkNlQzk5dVMwNit4OUt3VDRGTkJqdGErQURsRlZoc2ZlYnNsQmVDbjRVSjl3aGNmcTF5dGdRSlYyZlZnRXBndXp0aVk3M2ZHWnFxZDA0UEViNmorVGlTeE0zeUE3aVhOeS9FTDRFVVROajVrc2R3Q0FqUlRGalhINS94TXpvalF2bVR3eHl5a0NBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGJDSEVmaHJkS3pKajU1L2p3WGVqTzFsclVVZjcycWRtVE03MTRSbFNETnBaK1JlQUZ1Z1UwejlwMHY0ZU93eFpHZWNwN0Eyc3k2UGZUMmF0TzY3eEp4UHMrQkVBZTY2cnNNK09pZmFxM0Fhd3EvcklTNTRmYkQ3VE9yOE10NmlncHJJRUdZY2x2WDIrbVJjNmpBMGVjaDEva3lBMEZHSnRxalNhSTdpQjVVWHFqWE5zU3NxaS92OUhpNkhnaHdTRTlod3FUQ2hrZkF4VDdjVHJwNUVZaDQ5YytCVHdIU2c1bjNrN2FqaENaRUY5OVZwd2ZOSUtaV0RLS0NNdmpDRzFQM2pWeVBoVG4xSjN1VVhteGRWZmNwdkpaSlZoaEVmTFJEUnd4MkxiVTRCcnUyekpzUzRKUXovdXNTNkxBZGxQQ1FPVHhiWmZYWXBhZWRpNElvVnhVPSJdfQ.RTYwQ0Y0MzkxQUNCQzY2MDY2RDIxNEI2REQ1MUE0NDE3QUIzNzg2ODM4RkZBMDNDOTc5NkNFRTZBMDFDRUYxQg.SLGXASbv9e82KNH_dwkI243yoZVsjWiUjf4y8kzxgQtSszAyqvsurPmzGg63kO89JWtS5zKUDi0EbHzfpU0ddi8XgPAPt3ES61GKpJbzqrsi0wGXGvSTgebB7_MiaXfyA0X_lHBoH5Fx1zBl1xdUoqNRFkG3Ujcir0Fmgsx4y4ENdSeQsg_098e8gJnBYpx6pVeQSKhRyh1prRh210smZFH_Xgi28TD4TsRV4MYTN9iQ8GUGKcD9C2gD5LMa8nPcznS9TdtzdvZGgD1bZY6f4aLZiEXWBJFumU1fUOz5LXNdy7kbWfQbtYGukM9Fs4EHHKCnZiKCvdk37yiATT7oKw.eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXNGJwTTArTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1ETXdNRGMxTURFMVdoY05NVGt4TVRJNU1EYzFNREUxV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWW1Nd1lqWTRORGd0Tm1RME5TMDBObVF4TFdFNVltUXRZak16TkRReE1HSm1PREl6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQUxIWEl5MzVVMnJnRGpOZStvZHEza2dYNC9CT0UxMkVFQkIrb3pMYUVnWnVRbjBGOVNDVWxGckZtZlFPbzVuZlBHbi9FQnlpdEg4cXVLM1F5SUw0OVRYWnZmUlFpcG4rcW0xSUMvNzJUQ1k4WmZPR2dkeUduVExSUEhkc25JcnJ5dlB2NlBJOTl6UzU5WjlndG9kSmFNV04waHBwamZYek1xd0pSbkpabEpZbVExRzMxRlhzbVBNYVkrSFhNSURoY0MyUFBjVEhESGtsRTdUZkNlQzk5dVMwNit4OUt3VDRGTkJqdGErQURsRlZoc2ZlYnNsQmVDbjRVSjl3aGNmcTF5dGdRSlYyZlZnRXBndXp0aVk3M2ZHWnFxZDA0UEViNmorVGlTeE0zeUE3aVhOeS9FTDRFVVROajVrc2R3Q0FqUlRGalhINS94TXpvalF2bVR3eHl5a0NBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGJDSEVmaHJkS3pKajU1L2p3WGVqTzFsclVVZjcycWRtVE03MTRSbFNETnBaK1JlQUZ1Z1UwejlwMHY0ZU93eFpHZWNwN0Eyc3k2UGZUMmF0TzY3eEp4UHMrQkVBZTY2cnNNK09pZmFxM0Fhd3EvcklTNTRmYkQ3VE9yOE10NmlncHJJRUdZY2x2WDIrbVJjNmpBMGVjaDEva3lBMEZHSnRxalNhSTdpQjVVWHFqWE5zU3NxaS92OUhpNkhnaHdTRTlod3FUQ2hrZkF4VDdjVHJwNUVZaDQ5YytCVHdIU2c1bjNrN2FqaENaRUY5OVZwd2ZOSUtaV0RLS0NNdmpDRzFQM2pWeVBoVG4xSjN1VVhteGRWZmNwdkpaSlZoaEVmTFJEUnd4MkxiVTRCcnUyekpzUzRKUXovdXNTNkxBZGxQQ1FPVHhiWmZYWXBhZWRpNElvVnhVPSJdfQ.MEI4NDYyNDA5RkQxMTE3QjU2QTVBNEEyQkNFRDY1RkIxMUQxMUI5NjFBQ0I5MjE0NUVDN0I4RTkxNzM4OEQ4Qw.hEr3KRLV8BqS0-9gBtmZfz8sfEGJDZx5xx9Zd6nfvfh8-HB_5e_soROtGPoJVUVgszto53FJSdQ4rjUBtXY3wLeq6KptFe4gl3shCxvEAkwRtlDLav4Qfaaat16_Y2N738PAI1vZ1bXpXN1VUyohxmbFLoMc3BYND62qAyibzH1A3bswqyS4IhEN7ksCT-rMmJ9izkxKgjF4o3kZYWj1FvvseqKiOR54Q5WAWYRS_9pc0RqvTl0YV-Bu1kVsFORy-ELQ2-4p-qnm5KhLBve8vmVEx51JHTknIljEQzv7LuoJHxvy1he3hEKQIDZizqdzoo74NGznATgIWzqNBdmo1g";

		String[] payloadSignTxt = Arrays.stream(signatureTxt.split("\\.")).skip(3).toArray(s -> new String[s]);
		String bioSign = Arrays.stream(payloadSignTxt).collect(Collectors.joining("."));
		String header = payloadSignTxt[0];
		System.out.println("-----------HEADER Start-------");
		System.out.println(header);
		System.out.println("------------------");

		byte[] decodeBase64 = Base64.decodeBase64(header);
		try {

			JSONObject jsonObject = new JSONObject(new String(decodeBase64));
			System.out.println("-----------JSON Object-------");
			System.out.println(jsonObject.toString());
			System.out.println("------------------");
			System.out.println("-----------JSON Array-------");

			JSONArray ja = (JSONArray) jsonObject.get("x5c");
			System.out.println(ja.toString());
			System.out.println("------------------");

			JsonWebSignature jws = new JsonWebSignature();
			jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);
			jws.setCompactSerialization(bioSign);
			System.out.println("-----------JWS-------");
			System.out.println(jws.toString());
			System.out.println("------------------");

			List<X509Certificate> certificateChainHeaderValue = jws.getCertificateChainHeaderValue();
			System.out.println(certificateChainHeaderValue.get(0));
			PublicKey publicKey = certificateChainHeaderValue.get(0).getPublicKey();
			jws.setKey(publicKey);

			final boolean verified = jws.verifySignature();
			if (verified) {
				final String payload = jws.getPayload();
				System.out.println("Successfully payload --->" + payload);
			}

		} catch (Exception e) {
// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
